// <auto-generated />
using BECapstone;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BECapstone.Migrations
{
    [DbContext(typeof(BEDbContext))]
    [Migration("20231128032932_updateEvent6")]
    partial class updateEvent6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BECapstone.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A master of martial combat, skilled with a variety of weapons and armor",
                            Name = "Fighter",
                            image = "https://i.pinimg.com/originals/2c/8a/39/2c8a3940f4d506f7a7198a8035ae84c5.png"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A fierce warrior who can enter a battle rage",
                            Name = "Barbarian",
                            image = "https://i.pinimg.com/originals/c7/fe/25/c7fe251cd11a2ecb590d7d9efa596a49.png"
                        },
                        new
                        {
                            Id = 3,
                            Description = "An inspiring magician whose power echoes the music of creation",
                            Name = "Bard",
                            image = "https://i.pinimg.com/originals/28/c7/95/28c795e4db4c71da104642b271964c3a.png"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A priestly champion who wields divine magic in service of a higher power",
                            Name = "Cleric",
                            image = "https://www.kindpng.com/picc/m/627-6275446_static-media-cleric-logo-536f9581-dnd-5e-cleric.png"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A priest of the Old Faith, wielding the powers of nature and adopting animal forms",
                            Name = "Druid",
                            image = "https://i.pinimg.com/736x/97/96/46/979646f11eddd53c027dba86dfc428df--players-handbook-nerd-art.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A scholarly magic-user capable of manipulating the structures of reality",
                            Name = "Wizard",
                            image = "https://dreionsden.files.wordpress.com/2019/08/dnd5e_classsymb_wizard.png?w=1200"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A holy warrior bound to a sacred oath",
                            Name = "Paladin",
                            image = "https://i.pinimg.com/originals/ed/6a/cb/ed6acb4c1a9381e1efb232d4ea0916ea.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A scoundrel who uses stealth and trickery to overcome obstacles and enemies",
                            Name = "Rogue",
                            image = "https://i.pinimg.com/originals/bb/70/66/bb70661930e5533fcf2fb396855b0aa5.png"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A wielder of magic that is derived from a bargain with an extraplanar entity",
                            Name = "Warlock",
                            image = "https://i.pinimg.com/564x/9e/18/b2/9e18b24ae454cfec5a88bb15da8bee54.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A spellcaster who draws on inherent magic from a gift or bloodline",
                            Name = "Sorcerer",
                            image = "https://i.pinimg.com/564x/ca/15/24/ca15241cb07dd87c2d09287ee597f6ef.jpg"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A warrior who combats threats on the edges of civilization",
                            Name = "Ranger",
                            image = "https://i.pinimg.com/564x/1c/af/b8/1cafb836d4bf83e941c6b6870ff03ac8.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A master of martial arts, harnessing the power of the body in pursuit of physical and spiritual perfection",
                            Name = "Monk",
                            image = "https://i.pinimg.com/564x/f5/9a/ee/f59aee806df75cdce2fd591d96423270.jpg"
                        });
                });

            modelBuilder.Entity("BECapstone.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EndTimeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlayTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("StartTimeId")
                        .HasColumnType("integer");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndTimeId");

                    b.HasIndex("PlayTypeId");

                    b.HasIndex("StartTimeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = "10/23/2023",
                            EndTimeId = 13,
                            Name = "Cole's Event",
                            PlayTypeId = 1,
                            StartTimeId = 2,
                            uid = ""
                        });
                });

            modelBuilder.Entity("BECapstone.Models.PlayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Good"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Evil"
                        });
                });

            modelBuilder.Entity("BECapstone.Models.TimeSlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "1:00 AM"
                        },
                        new
                        {
                            Id = 13,
                            Value = "1:00 PM"
                        },
                        new
                        {
                            Id = 2,
                            Value = "2:00 AM"
                        },
                        new
                        {
                            Id = 14,
                            Value = "2:00 PM"
                        },
                        new
                        {
                            Id = 3,
                            Value = "3:00 AM"
                        },
                        new
                        {
                            Id = 15,
                            Value = "3:00 PM"
                        },
                        new
                        {
                            Id = 4,
                            Value = "4:00 AM"
                        },
                        new
                        {
                            Id = 16,
                            Value = "4:00 PM"
                        },
                        new
                        {
                            Id = 5,
                            Value = "5:00 AM"
                        },
                        new
                        {
                            Id = 17,
                            Value = "5:00 PM"
                        },
                        new
                        {
                            Id = 6,
                            Value = "6:00 AM"
                        },
                        new
                        {
                            Id = 18,
                            Value = "6:00 PM"
                        },
                        new
                        {
                            Id = 7,
                            Value = "7:00 AM"
                        },
                        new
                        {
                            Id = 19,
                            Value = "7:00 PM"
                        },
                        new
                        {
                            Id = 8,
                            Value = "8:00 AM"
                        },
                        new
                        {
                            Id = 20,
                            Value = "8:00 PM"
                        },
                        new
                        {
                            Id = 9,
                            Value = "9:00 AM"
                        },
                        new
                        {
                            Id = 21,
                            Value = "9:00 PM"
                        },
                        new
                        {
                            Id = 10,
                            Value = "10:00 AM"
                        },
                        new
                        {
                            Id = 22,
                            Value = "10:00 PM"
                        },
                        new
                        {
                            Id = 11,
                            Value = "11:00 AM"
                        },
                        new
                        {
                            Id = 23,
                            Value = "11:00 PM"
                        },
                        new
                        {
                            Id = 12,
                            Value = "12:00 AM"
                        },
                        new
                        {
                            Id = 24,
                            Value = "12:00 PM"
                        });
                });

            modelBuilder.Entity("BECapstone.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "cole.ama@gmail.com",
                            Name = "Cole",
                            uid = ""
                        });
                });

            modelBuilder.Entity("ClassEvents", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("ClassEvents");
                });

            modelBuilder.Entity("ClassUser", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ClassUser");
                });

            modelBuilder.Entity("EventsUser", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("EventsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EventsUser");
                });

            modelBuilder.Entity("BECapstone.Models.Events", b =>
                {
                    b.HasOne("BECapstone.Models.TimeSlots", "EndTime")
                        .WithMany()
                        .HasForeignKey("EndTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BECapstone.Models.PlayType", "PlayType")
                        .WithMany()
                        .HasForeignKey("PlayTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BECapstone.Models.TimeSlots", "StartTime")
                        .WithMany()
                        .HasForeignKey("StartTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndTime");

                    b.Navigation("PlayType");

                    b.Navigation("StartTime");
                });

            modelBuilder.Entity("ClassEvents", b =>
                {
                    b.HasOne("BECapstone.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BECapstone.Models.Events", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassUser", b =>
                {
                    b.HasOne("BECapstone.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BECapstone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventsUser", b =>
                {
                    b.HasOne("BECapstone.Models.Events", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BECapstone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
